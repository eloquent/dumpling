{"service_name":"travis-ci","service_job_id":"10880779","git":{"branch":"(detached from 0f472ca)","head":{"id":"0f472caf6071af3ecaed27a60fbe9c0e981b2a94","author_name":"Erin Millard","author_email":"ezzatron@gmail.com","committer_name":"Erin Millard","committer_email":"ezzatron@gmail.com","message":"Merge branch 'release\/0.2.0' into develop"},"remotes":[{"name":"origin","url":"git:\/\/github.com\/eloquent\/dumpling.git"}]},"run_at":"2013-09-02 04:18:33 +0000","source_files":[{"name":"Eloquent\/Dumpling\/Console\/Command\/DumplingCommand.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Console\\Command;\n\nuse Eloquent\\Dumpling\\Mysql\\Client\\MysqlClientFactory;\nuse Eloquent\\Dumpling\\Mysql\\Client\\MysqlClientFactoryInterface;\nuse Eloquent\\Dumpling\\Mysql\\Dumper\\Exception\\DumpFailedException;\nuse Eloquent\\Dumpling\\Mysql\\Dumper\\MysqlDumperFactory;\nuse Eloquent\\Dumpling\\Mysql\\Dumper\\MysqlDumperFactoryInterface;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\/**\n * Dump the structure and contents of MySQL databases and tables.\n *\/\nclass DumplingCommand extends Command\n{\n    \/**\n     * Construct a new dump command.\n     *\n     * @param MysqlClientFactoryInterface|null $clientFactory The MySQL client factory to use.\n     * @param MysqlDumperFactoryInterface|null $dumperFactory The MySQL dumper factory to use.\n     *\/\n    public function __construct(\n        MysqlClientFactoryInterface $clientFactory = null,\n        MysqlDumperFactoryInterface $dumperFactory = null\n    ) {\n        if (null === $clientFactory) {\n            $clientFactory = new MysqlClientFactory;\n        }\n        if (null === $dumperFactory) {\n            $dumperFactory = new MysqlDumperFactory;\n        }\n\n        $this->clientFactory = $clientFactory;\n        $this->dumperFactory = $dumperFactory;\n\n        parent::__construct();\n    }\n\n    \/**\n     * @return MysqlClientFactoryInterface\n     *\/\n    public function clientFactory()\n    {\n        return $this->clientFactory;\n    }\n\n    \/**\n     * @return MysqlDumperFactoryInterface\n     *\/\n    public function dumperFactory()\n    {\n        return $this->dumperFactory;\n    }\n\n    \/**\n     * Configure the command.\n     *\/\n    protected function configure()\n    {\n        $this->setName('dumpling');\n        $this->setDescription(\n            'Dump the structure and contents of MySQL databases and tables.'\n        );\n\n        $this->addArgument(\n            'database',\n            InputArgument::OPTIONAL,\n            'The database to dump.'\n        );\n        $this->addArgument(\n            'table',\n            InputArgument::OPTIONAL | InputArgument::IS_ARRAY,\n            'The table(s) to dump.'\n        );\n\n        $this->addOption(\n            'database',\n            'D',\n            InputOption::VALUE_REQUIRED | InputOption::VALUE_IS_ARRAY,\n            'Additional database(s) to dump.'\n        );\n        $this->addOption(\n            'exclude-database',\n            'X',\n            InputOption::VALUE_REQUIRED | InputOption::VALUE_IS_ARRAY,\n            'Database(s) to ignore.'\n        );\n        $this->addOption(\n            'table',\n            'T',\n            InputOption::VALUE_REQUIRED | InputOption::VALUE_IS_ARRAY,\n            'Additional table(s) to dump. Expects database.table format.'\n        );\n        $this->addOption(\n            'exclude-table',\n            'x',\n            InputOption::VALUE_REQUIRED | InputOption::VALUE_IS_ARRAY,\n            'Table(s) to ignore.'\n        );\n        $this->addOption(\n            'no-data',\n            'd',\n            InputOption::VALUE_NONE,\n            'Do not dump table data.'\n        );\n        $this->addOption(\n            'skip-locks',\n            'L',\n            InputOption::VALUE_NONE,\n            'Do not lock tables.'\n        );\n        $this->addOption(\n            'transaction',\n            't',\n            InputOption::VALUE_NONE,\n            'Dump data in a transactional manner. Only works for InnoDB tables.'\n        );\n        $this->addOption(\n            'host',\n            'H',\n            InputOption::VALUE_REQUIRED,\n            'The server hostname or IP address.',\n            'localhost'\n        );\n        $this->addOption(\n            'port',\n            'P',\n            InputOption::VALUE_REQUIRED,\n            'The server port.',\n            '3306'\n        );\n        $this->addOption(\n            'user',\n            'u',\n            InputOption::VALUE_REQUIRED,\n            'The user to connect as.',\n            'root'\n        );\n        $this->addOption(\n            'password',\n            'p',\n            InputOption::VALUE_REQUIRED,\n            'The password for the user.'\n        );\n    }\n\n    \/**\n     * Execute the command.\n     *\n     * @param InputInterface  $input  The input interface to use.\n     * @param OutputInterface $output The output interface to use.\n     *\n     * @throws DumpFailedException If the dump failed.\n     *\/\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $dumper = $this->dumperFactory()->create(\n            $this->clientFactory()->create(\n                $input->getOption('user'),\n                $input->getOption('password'),\n                $input->getOption('host'),\n                intval($input->getOption('port'))\n            )\n        );\n\n        $database = $input->getArgument('database');\n        $databases = $input->getOption('database');\n        if (null !== $database) {\n            array_unshift($databases, $database);\n        }\n        if (count($databases) < 1) {\n            $databases = null;\n        }\n\n        $tables = array_merge(\n            $input->getArgument('table'),\n            $input->getOption('table')\n        );\n        if (count($tables) < 1) {\n            $tables = null;\n        }\n\n        $excludeDatabases = $input->getOption('exclude-database');\n        if (count($excludeDatabases) < 1) {\n            $excludeDatabases = null;\n        }\n\n        $excludeTables = $input->getOption('exclude-table');\n        if (count($excludeTables) < 1) {\n            $excludeTables = null;\n        }\n\n        $dumper->dumpToConsole(\n            $output,\n            $input->getOption('no-data'),\n            $databases,\n            $tables,\n            $excludeDatabases,\n            $excludeTables,\n            !$input->getOption('skip-locks'),\n            $input->getOption('transaction')\n        );\n    }\n\n    private $clientFactory;\n    private $dumperFactory;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8,1,1,8,1,1,null,8,8,null,8,8,null,null,null,null,null,null,8,null,null,null,null,null,null,null,8,null,null,null,null,null,null,null,8,8,null,8,null,8,8,8,null,8,8,8,8,null,8,null,8,8,8,8,null,8,8,8,8,8,null,8,8,8,8,8,null,8,8,8,8,8,null,8,8,8,8,8,null,8,8,8,8,8,null,8,8,8,8,8,null,8,8,8,8,8,8,null,8,8,8,8,8,8,null,8,8,8,8,8,8,null,8,8,8,8,8,null,8,8,null,null,null,null,null,null,null,null,null,null,null,6,6,6,6,6,6,6,6,null,6,6,6,2,2,6,3,3,null,6,6,6,6,6,3,3,null,6,6,5,5,null,6,6,5,5,null,6,6,6,6,6,6,6,6,6,6,6,null,null,null,null]},{"name":"Eloquent\/Dumpling\/Console\/DumplingApplication.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Console;\n\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\/**\n * The Dumpling command line application.\n *\/\nclass DumplingApplication extends Application\n{\n    \/**\n     * The main Dumpling version number.\n     *\/\n    const VERSION = '0.2.0';\n\n    \/**\n     * Construct a new Dumpling command line application.\n     *\/\n    public function __construct()\n    {\n        parent::__construct('Dumpling', static::VERSION);\n\n        $this->add(new Command\\DumplingCommand);\n    }\n\n    \/**\n     * Run the Dumpling command line application.\n     *\n     * @param InputInterface|null  $input  The input interface to use.\n     * @param OutputInterface|null $output The output interface to use.\n     *\n     * @return integer The process exit code.\n     *\/\n    public function run(\n        InputInterface $input = null,\n        OutputInterface $output = null\n    ) {\n        if (null === $input) {\n            $input = new Input\\BoundArgvInput(array('dumpling'));\n        }\n\n        parent::run($input, $output);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,2,2,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,null,1,1,null]},{"name":"Eloquent\/Dumpling\/Console\/Input\/BoundArgvInput.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Console\\Input;\n\nuse Symfony\\Component\\Console\\Input\\ArgvInput;\n\n\/**\n * An input type with bound arguments.\n *\/\nclass BoundArgvInput extends ArgvInput\n{\n    \/**\n     * Construct a new bound argv input.\n     *\n     * @param array<integer,string>      $boundArguments The bound arguments.\n     * @param array<integer,string>|null $argv           The argv values.\n     * @param InputDefinition|null       $definition     The input definition.\n     *\n     * @throws Exception\\UndefinedArgvException If argv information cannot be determined.\n     *\/\n    public function __construct(\n        array $boundArguments,\n        array $argv = null,\n        InputDefinition $definition = null\n    ) {\n        if (null === $argv) {\n            if (!array_key_exists('argv', $_SERVER)) {\n                throw new Exception\\UndefinedArgvException;\n            }\n\n            $argv = $_SERVER['argv'];\n        }\n\n        array_splice($argv, 1, 0, $boundArguments);\n\n        parent::__construct($argv, $definition);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,2,1,null,null,1,1,null,2,null,2,2,null]},{"name":"Eloquent\/Dumpling\/Console\/Input\/Exception\/UndefinedArgvException.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Console\\Input\\Exception;\n\nuse Exception;\n\n\/**\n * No argv values could be determined from the environment.\n *\/\nfinal class UndefinedArgvException extends Exception\n{\n    \/**\n     * Construct a new undefined argv exception.\n     *\n     * @param Exception|null $previous The cause, if available.\n     *\/\n    public function __construct(Exception $previous = null)\n    {\n        parent::__construct('$_SERVER[\\'argv\\'] is undefined.', 0, $previous);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null]},{"name":"Eloquent\/Dumpling\/Mysql\/Client\/MysqlClient.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Mysql\\Client;\n\nuse Eloquent\\Dumpling\\Mysql\\Connection\\MysqlConnectionFactory;\nuse Eloquent\\Dumpling\\Mysql\\Connection\\MysqlConnectionFactoryInterface;\nuse mysqli;\n\n\/**\n * Retrieves information about MySQL servers.\n *\/\nclass MysqlClient implements MysqlClientInterface\n{\n    \/**\n     * Construct a new MySQL client.\n     *\n     * @param string|null                          $username          The username to connect as.\n     * @param string|null                          $password          The password for the user.\n     * @param string|null                          $host              The hostname or IP address of the server.\n     * @param integer|null                         $port              The port of the server.\n     * @param MysqlConnectionFactoryInterface|null $connectionFactory The connection factory to use.\n     *\/\n    public function __construct(\n        $username = null,\n        $password = null,\n        $host = null,\n        $port = null,\n        MysqlConnectionFactoryInterface $connectionFactory = null\n    ) {\n        if (null === $username) {\n            $username = 'root';\n        }\n        if (null === $host) {\n            $host = 'localhost';\n        }\n        if (null === $port) {\n            $port = 3306;\n        }\n        if (null === $connectionFactory) {\n            $connectionFactory = new MysqlConnectionFactory;\n        }\n\n        $this->host = $host;\n        $this->port = $port;\n        $this->username = $username;\n        $this->password = $password;\n        $this->connectionFactory = $connectionFactory;\n    }\n\n    \/**\n     * Handles closing the internal MySQL connection on desctruction.\n     *\/\n    public function __destruct()\n    {\n        if (null !== $this->connection) {\n            $this->connection->close();\n        }\n    }\n\n    \/**\n     * Get the username.\n     *\n     * @return string The username.\n     *\/\n    public function username()\n    {\n        return $this->username;\n    }\n\n    \/**\n     * Get the password.\n     *\n     * @return string|null The password, or null if no password was supplied.\n     *\/\n    public function password()\n    {\n        return $this->password;\n    }\n\n    \/**\n     * Get the hostname or IP address of the server.\n     *\n     * @return string The hostname or IP address.\n     *\/\n    public function host()\n    {\n        return $this->host;\n    }\n\n    \/**\n     * Get the port of the server.\n     *\n     * @return integer The port.\n     *\/\n    public function port()\n    {\n        return $this->port;\n    }\n\n    \/**\n     * Get the connection factory.\n     *\n     * @return MysqlConnectionFactoryInterface The connection factory.\n     *\/\n    public function connectionFactory()\n    {\n        return $this->connectionFactory;\n    }\n\n    \/**\n     * Get the list of database names.\n     *\n     * @return array<string> The database names.\n     *\/\n    public function listDatabases()\n    {\n        $result = $this->connection()->query(\n            'SELECT SCHEMA_NAME FROM information_schema.SCHEMATA'\n        );\n\n        $databases = array();\n        while ($row = $result->fetch_array(MYSQLI_NUM)) {\n            $databases[] = $row[0];\n        }\n\n        return $databases;\n    }\n\n    \/**\n     * Create a new MySQL connection, or return the existing one.\n     *\n     * @return mysqli The MySQL connection.\n     *\/\n    protected function connection()\n    {\n        if (null === $this->connection) {\n            $this->connection = $this->connectionFactory()->create(\n                $this->username(),\n                $this->password(),\n                $this->host(),\n                $this->port()\n            );\n        }\n\n        return $this->connection;\n    }\n\n    private $username;\n    private $password;\n    private $host;\n    private $port;\n    private $connection;\n    private $connectionFactory;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,5,1,1,5,1,1,5,1,1,5,1,1,null,5,5,5,5,5,5,null,null,null,null,null,null,3,1,1,3,null,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,null,null,2,null,2,null,2,2,2,2,null,2,null,null,null,null,null,null,null,null,null,2,2,2,2,2,2,2,2,null,2,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Dumpling\/Mysql\/Client\/MysqlClientFactory.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Mysql\\Client;\n\n\/**\n * Creates MySQL clients.\n *\/\nclass MysqlClientFactory implements MysqlClientFactoryInterface\n{\n    \/**\n     * Create a new MySQL client.\n     *\n     * @param string|null  $username The user to connect as.\n     * @param string|null  $password The password for the user.\n     * @param string|null  $host     The hostname or IP address of the server.\n     * @param integer|null $port     The port of the server.\n     *\n     * @return MysqlClientInterface The new MySQL client.\n     *\/\n    public function create(\n        $username = null,\n        $password = null,\n        $host = null,\n        $port = null\n    ) {\n        return new MysqlClient($username, $password, $host, $port);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"Eloquent\/Dumpling\/Mysql\/Client\/MysqlClientFactoryInterface.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Mysql\\Client;\n\n\/**\n * The interface implemented by MySQL client factories.\n *\/\ninterface MysqlClientFactoryInterface\n{\n    \/**\n     * Create a new MySQL client.\n     *\n     * @param string|null  $username The user to connect as.\n     * @param string|null  $password The password for the user.\n     * @param string|null  $host     The hostname or IP address of the server.\n     * @param integer|null $port     The port of the server.\n     *\n     * @return MysqlClientInterface The new MySQL client.\n     *\/\n    public function create(\n        $username = null,\n        $password = null,\n        $host = null,\n        $port = null\n    );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Dumpling\/Mysql\/Client\/MysqlClientInterface.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Mysql\\Client;\n\n\/**\n * The interface implemented by MySQL clients.\n *\/\ninterface MysqlClientInterface\n{\n    \/**\n     * Get the username.\n     *\n     * @return string The username.\n     *\/\n    public function username();\n\n    \/**\n     * Get the password.\n     *\n     * @return string|null The password, or null if no password was supplied.\n     *\/\n    public function password();\n\n    \/**\n     * Get the hostname or IP address of the server.\n     *\n     * @return string The hostname or IP address.\n     *\/\n    public function host();\n\n    \/**\n     * Get the port of the server.\n     *\n     * @return integer The port.\n     *\/\n    public function port();\n\n    \/**\n     * Get the list of database names.\n     *\n     * @return array<string> The database names.\n     *\/\n    public function listDatabases();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Dumpling\/Mysql\/Connection\/Exception\/ConnectionFailedException.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Mysql\\Connection\\Exception;\n\nuse Exception;\n\n\/**\n * Unable to establish a MySQL connection.\n *\/\nclass ConnectionFailedException extends Exception\n{\n    \/**\n     * Construct a new connection failed exception.\n     *\n     * @param string         $username The connection username.\n     * @param string|null    $password The connection password.\n     * @param string         $host     The connection host or IP address.\n     * @param integer        $port     The connection port.\n     * @param Exception|null $previous The cause, if available.\n     *\/\n    public function __construct(\n        $username,\n        $password,\n        $host,\n        $port,\n        Exception $previous = null\n    ) {\n        $this->username = $username;\n        $this->password = $password;\n        $this->host = $host;\n        $this->port = $port;\n\n        parent::__construct(\n            'Unable to establish a connection to MySQL.',\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * Get the connection username.\n     *\n     * @return string The username.\n     *\/\n    public function username()\n    {\n        return $this->username;\n    }\n\n    \/**\n     * Get the connection password.\n     *\n     * @return string|null The password.\n     *\/\n    public function password()\n    {\n        return $this->password;\n    }\n\n    \/**\n     * Get the connection host or IP address.\n     *\n     * @return string The host or IP address.\n     *\/\n    public function host()\n    {\n        return $this->host;\n    }\n\n    \/**\n     * Get the connection port.\n     *\n     * @return integer The port.\n     *\/\n    public function port()\n    {\n        return $this->port;\n    }\n\n    private $username;\n    private $password;\n    private $host;\n    private $port;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,null,1,1,1,null,1,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null]},{"name":"Eloquent\/Dumpling\/Mysql\/Connection\/MysqlConnectionFactory.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Mysql\\Connection;\n\nuse ErrorException;\nuse Icecave\\Isolator\\Isolator;\n\n\/**\n * Creates MySQL connections.\n *\/\nclass MysqlConnectionFactory implements MysqlConnectionFactoryInterface\n{\n    \/**\n     * Construct a new MySQL connection factory.\n     *\n     * @param Isolator|null $isolator The isolator to use.\n     *\/\n    public function __construct(Isolator $isolator = null)\n    {\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * Create a new MySQL connection.\n     *\n     * @param string|null  $username The user to connect as.\n     * @param string|null  $password The password for the user.\n     * @param string|null  $host     The hostname or IP address of the server.\n     * @param integer|null $port     The port of the server.\n     *\n     * @return mysqli                              The new MySQL connection.\n     * @throws Exception\\ConnectionFailedException If the connection fails.\n     *\/\n    public function create(\n        $username = null,\n        $password = null,\n        $host = null,\n        $port = null\n    ) {\n        if (null === $username) {\n            $username = 'root';\n        }\n        if (null === $host) {\n            $host = 'localhost';\n        }\n        if (null === $port) {\n            $port = 3306;\n        }\n\n        try {\n            $connection = $this->isolator->mysqli_connect(\n                $host,\n                $username,\n                $password,\n                null,\n                $port\n            );\n        } catch (ErrorException $e) {\n            throw new Exception\\ConnectionFailedException(\n                $username,\n                $password,\n                $host,\n                $port,\n                $e\n            );\n        }\n\n        return $connection;\n    }\n\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,3,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,1,1,3,1,1,3,1,1,null,null,3,3,3,3,3,null,3,3,1,1,1,1,1,null,1,null,null,2,null,null,null,null]},{"name":"Eloquent\/Dumpling\/Mysql\/Connection\/MysqlConnectionFactoryInterface.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Mysql\\Connection;\n\n\/**\n * The interface implemented by MySQL connection factories.\n *\/\ninterface MysqlConnectionFactoryInterface\n{\n    \/**\n     * Create a new MySQL connection.\n     *\n     * @param string|null  $username The user to connect as.\n     * @param string|null  $password The password for the user.\n     * @param string|null  $host     The hostname or IP address of the server.\n     * @param integer|null $port     The port of the server.\n     *\n     * @return mysqli                              The new MySQL connection.\n     * @throws Exception\\ConnectionFailedException If the connection fails.\n     *\/\n    public function create(\n        $username = null,\n        $password = null,\n        $host = null,\n        $port = null\n    );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Dumpling\/Mysql\/Dumper\/Exception\/DumpFailedException.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Mysql\\Dumper\\Exception;\n\nuse Exception;\n\n\/**\n * Dumping of MySQL information failed.\n *\/\nclass DumpFailedException extends Exception\n{\n    \/**\n     * Construct a new dump failed exception.\n     *\n     * @param Exception|null $previous The cause, if available.\n     *\/\n    public function __construct(Exception $previous = null)\n    {\n        parent::__construct('Unable to dump MySQL information.', 0, $previous);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null]},{"name":"Eloquent\/Dumpling\/Mysql\/Dumper\/Exception\/MysqldumpException.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Mysql\\Dumper\\Exception;\n\nuse Exception;\n\n\/**\n * Represents errors thrown during mysqldump execution.\n *\/\nclass MysqldumpException extends Exception\n{\n    \/**\n     * Construct a new mysqldump exception.\n     *\n     * @param string         $message  The error message returned by MySQL.\n     * @param integer        $exitCode The mysqldump process exit code.\n     * @param Exception|null $previous The cause, if available.\n     *\/\n    public function __construct($message, $exitCode, Exception $previous = null)\n    {\n        parent::__construct($message, $exitCode, $previous);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null]},{"name":"Eloquent\/Dumpling\/Mysql\/Dumper\/Exception\/NoDatabasesException.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Mysql\\Dumper\\Exception;\n\nuse Exception;\n\n\/**\n * No databases to dump.\n *\/\nclass NoDatabasesException extends Exception\n{\n    \/**\n     * Construct a new no databases exception.\n     *\n     * @param Exception|null $previous The cause, if available.\n     *\/\n    public function __construct(Exception $previous = null)\n    {\n        parent::__construct('No databases to dump.', 0, $previous);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null]},{"name":"Eloquent\/Dumpling\/Mysql\/Dumper\/Exception\/UnqualifiedTableException.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Mysql\\Dumper\\Exception;\n\nuse Exception;\n\n\/**\n * Unable to determine the qualified form of a supplied table name.\n *\/\nclass UnqualifiedTableException extends Exception\n{\n    \/**\n     * Construct a new unqualified table exception.\n     *\n     * @param string         $table    The supplied table name.\n     * @param Exception|null $previous The cause, if available.\n     *\/\n    public function __construct($table, Exception $previous = null)\n    {\n        $this->table = $table;\n\n        parent::__construct(\n            sprintf(\n                'Unqualified table name %s - use database.table form instead.',\n                var_export($table, true)\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * Get the table name.\n     *\n     * @return string The table name.\n     *\/\n    public function table()\n    {\n        return $this->table;\n    }\n\n    private $table;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,1,1,1,1,null,1,1,null,null,null,null,null,null,null,null,1,null,null,null,null]},{"name":"Eloquent\/Dumpling\/Mysql\/Dumper\/MysqlDumper.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Mysql\\Dumper;\n\nuse Eloquent\\Dumpling\\Console\\DumplingApplication;\nuse Eloquent\\Dumpling\\Mysql\\Client\\MysqlClientInterface;\nuse Eloquent\\Dumpling\\Process\\ProcessFactory;\nuse Eloquent\\Dumpling\\Process\\ProcessFactoryInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Process\\ExecutableFinder;\nuse Symfony\\Component\\Process\\Process;\n\n\/**\n * Dumps the structure and contents of MySQL databases and tables.\n *\/\nclass MysqlDumper implements MysqlDumperInterface\n{\n    \/**\n     * Construct a new MySQL dumper.\n     *\n     * @param MysqlClientInterface         $client           The MySQL client to use.\n     * @param ExecutableFinder|null        $executableFinder The executable finder to use.\n     * @param ProcessFactoryInterface|null $processFactory   The process factory to use.\n     *\/\n    public function __construct(\n        MysqlClientInterface $client,\n        ExecutableFinder $executableFinder = null,\n        ProcessFactoryInterface $processFactory = null\n    ) {\n        if (null === $executableFinder) {\n            $executableFinder = new ExecutableFinder;\n        }\n        if (null === $processFactory) {\n            $processFactory = new ProcessFactory;\n        }\n\n        $this->client = $client;\n        $this->executableFinder = $executableFinder;\n        $this->processFactory = $processFactory;\n    }\n\n    \/**\n     * Get the MySQL client.\n     *\n     * @return MysqlClientInterface The MySQL client.\n     *\/\n    public function client()\n    {\n        return $this->client;\n    }\n\n    \/**\n     * Get the executable finder.\n     *\n     * @return ExecutableFinder The executable finder.\n     *\/\n    public function executableFinder()\n    {\n        return $this->executableFinder;\n    }\n\n    \/**\n     * Get the process factory.\n     *\n     * @return ProcessFactoryInterface The process factory.\n     *\/\n    public function processFactory()\n    {\n        return $this->processFactory;\n    }\n\n    \/**\n     * Dump MySQL information to a callback.\n     *\n     * The callback accepts two arguments. The first is the type of output,\n     * which will be either Process::OUT, or Process::ERR, for standard output\n     * and error output respectively. The second is the output itself.\n     *\n     * @param callable           $callback         The callback to pass output to.\n     * @param boolean|null       $excludeData      True if data should be excluded.\n     * @param array<string>|null $databases        The list of databases to dump.\n     * @param array<string>|null $tables           The list of tables to dump.\n     * @param array<string>|null $excludeDatabases The list of databases to exclude from the dump.\n     * @param array<string>|null $excludeTables    The list of tables to exclude from the dump.\n     * @param boolean|null       $useLocks         True if tables should be locked before dumping.\n     * @param boolean|null       $useTransactions  True if transactions should be used when dumping.\n     *\n     * @throws Exception\\NoDatabasesException      If there are no databases to dump.\n     * @throws Exception\\UnqualifiedTableException If an unqualified table name was supplied.\n     * @throws Exception\\DumpFailedException       If the dump failed.\n     *\/\n    public function dump(\n        $callback,\n        $excludeData = null,\n        array $databases = null,\n        array $tables = null,\n        array $excludeDatabases = null,\n        array $excludeTables = null,\n        $useLocks = null,\n        $useTransactions = null\n    ) {\n        if (null === $excludeData) {\n            $excludeData = false;\n        }\n        if (null === $useLocks) {\n            $useLocks = true;\n        }\n        if (null === $useTransactions) {\n            $useTransactions = false;\n        }\n\n        $arguments = array(\n            $this->executableFinder->find('mysqldump', 'mysqldump'),\n            '--routines',\n            '--skip-extended-insert',\n            '--order-by-primary',\n            '--hex-blob',\n            '--host',\n            $this->client()->host(),\n            '--port',\n            strval($this->client()->port()),\n            '--user',\n            $this->client()->username(),\n            '--protocol',\n            'TCP',\n        );\n\n        if (null !== $this->client()->password()) {\n            $arguments[] = '--password=' . $this->client()->password();\n        }\n\n        if ($excludeData) {\n            $arguments[] = '--no-data';\n        }\n        if (!$useLocks) {\n            $arguments[] = '--skip-lock-tables';\n        }\n        if ($useTransactions) {\n            $arguments[] = '--single-transaction';\n        }\n\n        list($entities, $isMultiDump) = $this->normalizeEntities(\n            $databases,\n            $tables,\n            $excludeDatabases,\n            $excludeTables\n        );\n\n        $this->writePrimaryHeader($callback);\n        if ($isMultiDump) {\n            $this->dumpMulti($callback, $arguments, $entities);\n        } else {\n            $this->dumpSingle($callback, $arguments, $entities);\n        }\n    }\n\n    \/**\n     * Dump MySQL information to a stream.\n     *\n     * @param stream             $output           The output stream to write to.\n     * @param boolean|null       $excludeData      True if data should be excluded.\n     * @param array<string>|null $databases        The list of databases to dump.\n     * @param array<string>|null $tables           The list of tables to dump.\n     * @param array<string>|null $excludeDatabases The list of databases to exclude from the dump.\n     * @param array<string>|null $excludeTables    The list of tables to exclude from the dump.\n     * @param boolean|null       $useLocks         True if tables should be locked before dumping.\n     * @param boolean|null       $useTransactions  True if transactions should be used when dumping.\n     *\n     * @throws Exception\\NoDatabasesException      If there are no databases to dump.\n     * @throws Exception\\UnqualifiedTableException If an unqualified table name was supplied.\n     * @throws Exception\\DumpFailedException       If the dump failed.\n     *\/\n    public function dumpToStream(\n        $output,\n        $excludeData = null,\n        array $databases = null,\n        array $tables = null,\n        array $excludeDatabases = null,\n        array $excludeTables = null,\n        $useLocks = null,\n        $useTransactions = null\n    ) {\n        $data = '';\n        $this->dump(\n            function ($type, $buffer) use ($output) {\n                if (Process::ERR !== $type) {\n                    fwrite($output, $buffer);\n                }\n            },\n            $excludeData,\n            $databases,\n            $tables,\n            $excludeDatabases,\n            $excludeTables,\n            $useLocks,\n            $useTransactions\n        );\n\n        return $data;\n    }\n\n    \/**\n     * Dump MySQL information to a string.\n     *\n     * @param boolean|null       $excludeData      True if data should be excluded.\n     * @param array<string>|null $databases        The list of databases to dump.\n     * @param array<string>|null $tables           The list of tables to dump.\n     * @param array<string>|null $excludeDatabases The list of databases to exclude from the dump.\n     * @param array<string>|null $excludeTables    The list of tables to exclude from the dump.\n     * @param boolean|null       $useLocks         True if tables should be locked before dumping.\n     * @param boolean|null       $useTransactions  True if transactions should be used when dumping.\n     *\n     * @return string                              The MySQL information.\n     * @throws Exception\\NoDatabasesException      If there are no databases to dump.\n     * @throws Exception\\UnqualifiedTableException If an unqualified table name was supplied.\n     * @throws Exception\\DumpFailedException       If the dump failed.\n     *\/\n    public function dumpToString(\n        $excludeData = null,\n        array $databases = null,\n        array $tables = null,\n        array $excludeDatabases = null,\n        array $excludeTables = null,\n        $useLocks = null,\n        $useTransactions = null\n    ) {\n        $data = '';\n        $this->dump(\n            function ($type, $buffer) use (&$data) {\n                if (Process::ERR !== $type) {\n                    $data .= $buffer;\n                }\n            },\n            $excludeData,\n            $databases,\n            $tables,\n            $excludeDatabases,\n            $excludeTables,\n            $useLocks,\n            $useTransactions\n        );\n\n        return $data;\n    }\n\n    \/**\n     * Dump MySQL information to the console.\n     *\n     * @param OutputInterface    $output           The console output to use.\n     * @param boolean|null       $excludeData      True if data should be excluded.\n     * @param array<string>|null $databases        The list of databases to dump.\n     * @param array<string>|null $tables           The list of tables to dump.\n     * @param array<string>|null $excludeDatabases The list of databases to exclude from the dump.\n     * @param array<string>|null $excludeTables    The list of tables to exclude from the dump.\n     * @param boolean|null       $useLocks         True if tables should be locked before dumping.\n     * @param boolean|null       $useTransactions  True if transactions should be used when dumping.\n     *\n     * @throws Exception\\NoDatabasesException      If there are no databases to dump.\n     * @throws Exception\\UnqualifiedTableException If an unqualified table name was supplied.\n     * @throws Exception\\DumpFailedException       If the dump failed.\n     *\/\n    public function dumpToConsole(\n        OutputInterface $output,\n        $excludeData = null,\n        array $databases = null,\n        array $tables = null,\n        array $excludeDatabases = null,\n        array $excludeTables = null,\n        $useLocks = null,\n        $useTransactions = null\n    ) {\n        return $this->dump(\n            function ($type, $buffer) use ($output) {\n                if (Process::ERR !== $type) {\n                    $output->write($buffer);\n                }\n            },\n            $excludeData,\n            $databases,\n            $tables,\n            $excludeDatabases,\n            $excludeTables,\n            $useLocks,\n            $useTransactions\n        );\n    }\n\n    \/**\n     * Perform a dump using multiple commands to work around some technical\n     * limitations of mysqldump.\n     *\n     * @param callable                    $callback  The callback to pass output to.\n     * @param array<string>               $arguments The mysqldump arguments.\n     * @param array<string,array<string>> $entities  The normalized entities to dump.\n     *\n     * @throws Exception\\DumpFailedException If any dump fails.\n     *\/\n    protected function dumpMulti($callback, array $arguments, array $entities)\n    {\n        foreach ($entities as $database => $tableConfiguration) {\n            $this->dumpSingle(\n                $callback,\n                $arguments,\n                array($database => $tableConfiguration)\n            );\n        }\n    }\n\n    \/**\n     * Perform a dump that can be performed with a single mysqldump execution.\n     *\n     * @param callable                    $callback  The callback to pass output to.\n     * @param array<string>               $arguments The mysqldump arguments.\n     * @param array<string,array<string>> $entities  The normalized entities to dump.\n     *\n     * @throws Exception\\DumpFailedException If the dump failed.\n     *\/\n    protected function dumpSingle($callback, array $arguments, array $entities)\n    {\n        if (count($entities) > 0) {\n            $arguments[] = '--databases';\n\n            foreach ($entities as $database => $tableConfiguration) {\n                $arguments[] = $database;\n\n                if (count($tableConfiguration['include']) > 0) {\n                    $arguments[] = '--tables';\n\n                    foreach ($tableConfiguration['include'] as $table) {\n                        $arguments[] = $table;\n                    }\n                }\n            }\n\n            foreach ($entities as $database => $tableConfiguration) {\n                foreach ($tableConfiguration['exclude'] as $table) {\n                    $arguments[] = '--ignore-table';\n                    $arguments[] = sprintf('%s.%s', $database, $table);\n                }\n            }\n        }\n\n        $this->writeCommandHeader($callback, $arguments);\n        $process = $this->processFactory()->create($arguments);\n\n        $exitCode = $process->run($callback);\n\n        if (!$process->isSuccessful()) {\n            throw new Exception\\DumpFailedException(\n                new Exception\\MysqldumpException(\n                    $process->getErrorOutput(),\n                    $exitCode\n                )\n            );\n        }\n    }\n\n    \/**\n     * Normalize the supplied entity inclusions and exclusions.\n     *\n     * @param array<string> $databases        The databases to include.\n     * @param array<string> $tables           The tables to include.\n     * @param array<string> $excludeDatabases The databases to exclude.\n     * @param array<string> $excludeTables    The tables to exclude.\n     *\n     * @return array<string,array<string>>         The normalized entities.\n     * @throws Exception\\NoDatabasesException      If there are no databases to dump.\n     * @throws Exception\\UnqualifiedTableException If an unqualified table name was supplied.\n     *\/\n    protected function normalizeEntities(\n        array $databases = null,\n        array $tables = null,\n        array $excludeDatabases = null,\n        array $excludeTables = null\n    ) {\n        if (null === $databases) {\n            $databases = array();\n        }\n        if (null === $tables) {\n            $tables = array();\n        }\n        if (null === $excludeDatabases) {\n            $excludeDatabases = array();\n        }\n        if (null === $excludeTables) {\n            $excludeTables = array();\n        }\n\n        $databasesSpecified = count($databases) > 0;\n        $tables = $this->normalizeArray($tables);\n        $tablesSpecified = count($tables) > 0;\n\n        if (!$tablesSpecified && !$databasesSpecified) {\n            $databases = $this->client()->listDatabases();\n        }\n        $databases = $this->normalizeArray($databases);\n        if (!$tablesSpecified && count($databases) < 1) {\n            throw new Exception\\NoDatabasesException;\n        }\n\n        $excludeDatabases = $this->normalizeArray(\n            array_merge(\n                array(\n                    'mysql',\n                    'information_schema',\n                    'performance_schema',\n                ),\n                $excludeDatabases\n            )\n        );\n        $excludeTables = $this->normalizeArray($excludeTables);\n\n        $primaryDatabase = null;\n        if (array_key_exists(0, $databases)) {\n            $primaryDatabase = $databases[0];\n        }\n        $tables = $this->normalizeTables($tables, $primaryDatabase);\n        $excludeTables = $this->normalizeTables(\n            $excludeTables,\n            $primaryDatabase\n        );\n\n        $entities = array();\n        $tableIncludeCount = 0;\n        foreach ($databases as $database) {\n            if (\n                !$databasesSpecified &&\n                in_array($database, $excludeDatabases, true)\n            ) {\n                continue;\n            }\n\n            $entities[$database] = array(\n                'include' => array(),\n                'exclude' => array(),\n            );\n        }\n        foreach ($tables as $database => $databaseTables) {\n            if (count($databaseTables) > 0) {\n                ++$tableIncludeCount;\n            }\n\n            $entities[$database]['include'] = $databaseTables;\n            $entities[$database]['exclude'] = array();\n        }\n        foreach ($excludeTables as $database => $databaseTables) {\n            if (array_key_exists($database, $entities)) {\n                $entities[$database]['exclude'] = $databaseTables;\n            }\n        }\n\n        return array($entities, $tableIncludeCount > 1);\n    }\n\n    \/**\n     * Normalize an array of case-insensitive strings.\n     *\n     * @param array<string> $values The array to normalize.\n     *\n     * @return array<string> The normalized array.\n     *\/\n    protected function normalizeArray(array $values)\n    {\n        return array_unique(\n            array_map(\n                function ($value) {\n                    return strtolower(trim($value));\n                },\n                $values\n            )\n        );\n    }\n\n    \/**\n     * Normalize an array of table names.\n     *\n     * @param array<string> $tables          The table names.\n     * @param string        $primaryDatabase The first database name in the supplied list.\n     *\n     * @return array<string>                       The normalized table names.\n     * @throws Exception\\UnqualifiedTableException If an unqualified table name was supplied.\n     *\/\n    protected function normalizeTables(array $tables, $primaryDatabase)\n    {\n        $normalized = array();\n        foreach ($tables as $table) {\n            $parts = explode('.', $table);\n\n            if (count($parts) > 1) {\n                $database = array_shift($parts);\n            } else {\n                if (null === $primaryDatabase) {\n                    throw new Exception\\UnqualifiedTableException($table);\n                }\n\n                $database = $primaryDatabase;\n            }\n\n            $normalized[$database][] = implode('.', $parts);\n        }\n\n        return $normalized;\n    }\n\n    \/**\n     * Write the main Dumpling header.\n     *\n     * @param callable $callback The callback to pass output to.\n     *\/\n    protected function writePrimaryHeader($callback)\n    {\n        $this->writeOutput(\n            $callback,\n            sprintf(\n                '-- Dumpling %s' . PHP_EOL,\n                DumplingApplication::VERSION\n            )\n        );\n    }\n\n    \/**\n     * Write the secondary Dumpling command header.\n     *\n     * @param callable $callback The callback to pass output to.\n     *\/\n    protected function writeCommandHeader($callback, array $arguments)\n    {\n        $displayArguments = array();\n        $redactNext = false;\n        foreach ($arguments as $argument) {\n            if ($redactNext) {\n                $redactNext = false;\n            } else {\n                switch ($argument) {\n                    case '--user':\n                    case '--host':\n                    case '--port':\n                        $redactNext = true;\n\n                        break;\n\n                    default:\n                        if (0 !== strpos($argument, '--password=')) {\n                            $displayArguments[] = $argument;\n                        }\n                }\n            }\n        }\n\n        $this->writeOutput(\n            $callback,\n            sprintf(\n                PHP_EOL .\n                    '-- Dumpling executing command: %s' . PHP_EOL .\n                    PHP_EOL,\n                implode(' ', array_map('escapeshellarg', $displayArguments))\n            )\n        );\n    }\n\n    \/**\n     * Write arbitrary output.\n     *\n     * @param callable $callback The callback to pass output to.\n     *\/\n    protected function writeOutput($callback, $output)\n    {\n        $callback(Process::OUT, $output);\n    }\n\n    private $client;\n    private $executableFinder;\n    private $processFactory;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,18,1,1,18,1,1,null,18,18,18,18,null,null,null,null,null,null,null,null,17,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,16,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,16,14,14,16,14,14,16,14,14,null,null,16,16,16,16,16,16,16,16,16,16,16,16,16,16,null,16,16,16,null,16,2,2,16,2,2,16,2,2,null,16,16,16,16,null,16,null,14,14,2,2,12,null,13,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,1,1,1,1,1,1,1,1,1,1,null,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,null,1,1,1,1,1,1,1,1,1,1,null,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,1,1,1,1,1,1,1,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,2,2,2,2,2,2,2,null,null,null,null,null,null,null,null,null,null,null,null,14,14,null,14,14,null,14,4,null,4,4,4,4,14,null,14,14,2,2,14,14,14,null,14,14,null,14,null,14,1,1,1,null,1,1,null,13,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,16,11,11,16,11,11,16,14,14,16,14,14,null,16,16,16,null,16,9,9,16,16,1,null,null,15,15,null,15,15,15,15,null,15,15,15,null,15,15,12,12,15,14,14,null,14,null,14,14,14,null,12,8,12,8,null,null,12,12,12,null,14,14,4,4,4,null,4,4,14,14,2,2,2,14,null,14,null,null,null,null,null,null,null,null,null,null,null,16,16,16,15,16,null,16,16,null,null,null,null,null,null,null,null,null,null,null,null,null,15,15,6,null,6,4,4,2,1,null,null,1,null,null,5,14,null,14,null,null,null,null,null,null,null,null,null,14,14,14,14,null,14,14,14,null,null,null,null,null,null,null,null,14,14,14,14,14,14,null,14,14,14,14,null,14,null,14,14,14,14,14,null,14,null,14,14,14,14,14,14,14,14,14,14,null,null,null,null,null,null,null,null,14,14,null,null,null,null,null]},{"name":"Eloquent\/Dumpling\/Mysql\/Dumper\/MysqlDumperFactory.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Mysql\\Dumper;\n\nuse Eloquent\\Dumpling\\Mysql\\Client\\MysqlClientInterface;\nuse Eloquent\\Dumpling\\Process\\ProcessFactoryInterface;\nuse Symfony\\Component\\Process\\ExecutableFinder;\n\n\/**\n * The interface implemented by MySQL dumper factories.\n *\/\nclass MysqlDumperFactory implements MysqlDumperFactoryInterface\n{\n    \/**\n     * Create a new MySQL dumper.\n     *\n     * @param MysqlClientInterface         $client           The MySQL client to use.\n     * @param ExecutableFinder|null        $executableFinder The executable finder to use.\n     * @param ProcessFactoryInterface|null $processFactory   The process factory to use.\n     *\n     * @return MysqlDumperInterface The new MySQL dumper.\n     *\/\n    public function create(\n        MysqlClientInterface $client,\n        ExecutableFinder $executableFinder = null,\n        ProcessFactoryInterface $processFactory = null\n    ) {\n        return new MysqlDumper($client, $executableFinder, $processFactory);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"Eloquent\/Dumpling\/Mysql\/Dumper\/MysqlDumperFactoryInterface.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Mysql\\Dumper;\n\nuse Eloquent\\Dumpling\\Mysql\\Client\\MysqlClientInterface;\nuse Eloquent\\Dumpling\\Process\\ProcessFactoryInterface;\nuse Symfony\\Component\\Process\\ExecutableFinder;\n\n\/**\n * The interface implemented by MySQL dumper factories.\n *\/\ninterface MysqlDumperFactoryInterface\n{\n    \/**\n     * Create a new MySQL dumper.\n     *\n     * @param MysqlClientInterface         $client           The MySQL client to use.\n     * @param ExecutableFinder|null        $executableFinder The executable finder to use.\n     * @param ProcessFactoryInterface|null $processFactory   The process factory to use.\n     *\n     * @return MysqlDumperInterface The new MySQL dumper.\n     *\/\n    public function create(\n        MysqlClientInterface $client,\n        ExecutableFinder $executableFinder = null,\n        ProcessFactoryInterface $processFactory = null\n    );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Dumpling\/Mysql\/Dumper\/MysqlDumperInterface.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Mysql\\Dumper;\n\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\/**\n * The interface implemented by MySQL dumpers.\n *\/\ninterface MysqlDumperInterface\n{\n    \/**\n     * Dump MySQL information to a callback.\n     *\n     * The callback accepts two arguments. The first is the type of output,\n     * which will be either Process::OUT, or Process::ERR, for standard output\n     * and error output respectively. The second is the output itself.\n     *\n     * @param callable           $callback         The callback to pass output to.\n     * @param boolean|null       $excludeData      True if data should be excluded.\n     * @param array<string>|null $databases        The list of databases to dump.\n     * @param array<string>|null $tables           The list of tables to dump.\n     * @param array<string>|null $excludeDatabases The list of databases to exclude from the dump.\n     * @param array<string>|null $excludeTables    The list of tables to exclude from the dump.\n     * @param boolean|null       $useLocks         True if tables should be locked before dumping.\n     * @param boolean|null       $useTransactions  True if transactions should be used when dumping.\n     *\n     * @throws Exception\\NoDatabasesException      If there are no databases to dump.\n     * @throws Exception\\UnqualifiedTableException If an unqualified table name was supplied.\n     * @throws Exception\\DumpFailedException       If the dump failed.\n     *\/\n    public function dump(\n        $callback,\n        $excludeData = null,\n        array $databases = null,\n        array $tables = null,\n        array $excludeDatabases = null,\n        array $excludeTables = null,\n        $useLocks = null,\n        $useTransactions = null\n    );\n\n    \/**\n     * Dump MySQL information to a stream.\n     *\n     * @param stream             $output           The output stream to write to.\n     * @param boolean|null       $excludeData      True if data should be excluded.\n     * @param array<string>|null $databases        The list of databases to dump.\n     * @param array<string>|null $tables           The list of tables to dump.\n     * @param array<string>|null $excludeDatabases The list of databases to exclude from the dump.\n     * @param array<string>|null $excludeTables    The list of tables to exclude from the dump.\n     * @param boolean|null       $useLocks         True if tables should be locked before dumping.\n     * @param boolean|null       $useTransactions  True if transactions should be used when dumping.\n     *\n     * @throws Exception\\NoDatabasesException      If there are no databases to dump.\n     * @throws Exception\\UnqualifiedTableException If an unqualified table name was supplied.\n     * @throws Exception\\DumpFailedException       If the dump failed.\n     *\/\n    public function dumpToStream(\n        $output,\n        $excludeData = null,\n        array $databases = null,\n        array $tables = null,\n        array $excludeDatabases = null,\n        array $excludeTables = null,\n        $useLocks = null,\n        $useTransactions = null\n    );\n\n    \/**\n     * Dump MySQL information to a string.\n     *\n     * @param boolean|null       $excludeData      True if data should be excluded.\n     * @param array<string>|null $databases        The list of databases to dump.\n     * @param array<string>|null $tables           The list of tables to dump.\n     * @param array<string>|null $excludeDatabases The list of databases to exclude from the dump.\n     * @param array<string>|null $excludeTables    The list of tables to exclude from the dump.\n     * @param boolean|null       $useLocks         True if tables should be locked before dumping.\n     * @param boolean|null       $useTransactions  True if transactions should be used when dumping.\n     *\n     * @return string                              The MySQL information.\n     * @throws Exception\\NoDatabasesException      If there are no databases to dump.\n     * @throws Exception\\UnqualifiedTableException If an unqualified table name was supplied.\n     * @throws Exception\\DumpFailedException       If the dump failed.\n     *\/\n    public function dumpToString(\n        $excludeData = null,\n        array $databases = null,\n        array $tables = null,\n        array $excludeDatabases = null,\n        array $excludeTables = null,\n        $useLocks = null,\n        $useTransactions = null\n    );\n\n    \/**\n     * Dump MySQL information to the console.\n     *\n     * @param OutputInterface    $output           The console output to use.\n     * @param boolean|null       $excludeData      True if data should be excluded.\n     * @param array<string>|null $databases        The list of databases to dump.\n     * @param array<string>|null $tables           The list of tables to dump.\n     * @param array<string>|null $excludeDatabases The list of databases to exclude from the dump.\n     * @param array<string>|null $excludeTables    The list of tables to exclude from the dump.\n     * @param boolean|null       $useLocks         True if tables should be locked before dumping.\n     * @param boolean|null       $useTransactions  True if transactions should be used when dumping.\n     *\n     * @throws Exception\\NoDatabasesException      If there are no databases to dump.\n     * @throws Exception\\UnqualifiedTableException If an unqualified table name was supplied.\n     * @throws Exception\\DumpFailedException       If the dump failed.\n     *\/\n    public function dumpToConsole(\n        OutputInterface $output,\n        $excludeData = null,\n        array $databases = null,\n        array $tables = null,\n        array $excludeDatabases = null,\n        array $excludeTables = null,\n        $useLocks = null,\n        $useTransactions = null\n    );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Dumpling\/Process\/ProcessFactory.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Process;\n\nuse Symfony\\Component\\Process\\ProcessBuilder;\n\n\/**\n * Creates processes.\n *\/\nclass ProcessFactory implements ProcessFactoryInterface\n{\n    \/**\n     * Create a new process.\n     *\n     * @param array<string> $arguments The process arguments.\n     *\n     * @return Process\n     *\/\n    public function create(array $arguments)\n    {\n        $builder = new ProcessBuilder($arguments);\n\n        return $builder->getProcess();\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,null]},{"name":"Eloquent\/Dumpling\/Process\/ProcessFactoryInterface.php","source":"<?php\n\n\/*\n * This file is part of the Dumpling package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Dumpling\\Process;\n\n\/**\n * The interface implemented by process factories.\n *\/\ninterface ProcessFactoryInterface\n{\n    \/**\n     * Create a new process.\n     *\n     * @param array<string> $arguments The process arguments.\n     *\n     * @return Process\n     *\/\n    public function create(array $arguments);\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}]}